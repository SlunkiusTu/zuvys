import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchSectors } from "./sectorsAPI";

const initialState = {
  value: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getSectorsAsync = createAsyncThunk(
  "sectors/fetchSectors",
  async () => {
    const response = await fetchSectors();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const sectorsSlice = createSlice({
  name: "sectors",
  initialState,
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSectorsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getSectorsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value += action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSectors = (state) => state.counter.value;

export default sectorsSlice.reducer;
